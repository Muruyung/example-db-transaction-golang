// Code generated by MockGen. DO NOT EDIT.
// Source: /home/robi/ngoding/pribadi/coba-coba/services/coba_svc/domain/repository/common.go

// Package mocks is a generated GoMock package.
package mocks

import (
	configmysql "coba/pkg/database/mysql"
	repository "coba/services/coba_svc/domain/repository"
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMapperCommon is a mock of MapperCommon interface.
type MockMapperCommon struct {
	ctrl     *gomock.Controller
	recorder *MockMapperCommonMockRecorder
}

// MockMapperCommonMockRecorder is the mock recorder for MockMapperCommon.
type MockMapperCommonMockRecorder struct {
	mock *MockMapperCommon
}

// NewMockMapperCommon creates a new mock instance.
func NewMockMapperCommon(ctrl *gomock.Controller) *MockMapperCommon {
	mock := &MockMapperCommon{ctrl: ctrl}
	mock.recorder = &MockMapperCommonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapperCommon) EXPECT() *MockMapperCommonMockRecorder {
	return m.recorder
}

// MapDomainToModels mocks base method.
func (m *MockMapperCommon) MapDomainToModels() repository.ModelsCommon {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapDomainToModels")
	ret0, _ := ret[0].(repository.ModelsCommon)
	return ret0
}

// MapDomainToModels indicates an expected call of MapDomainToModels.
func (mr *MockMapperCommonMockRecorder) MapDomainToModels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapDomainToModels", reflect.TypeOf((*MockMapperCommon)(nil).MapDomainToModels))
}

// MapModelsToDomain mocks base method.
func (m *MockMapperCommon) MapModelsToDomain(entityStruct interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MapModelsToDomain", entityStruct)
}

// MapModelsToDomain indicates an expected call of MapModelsToDomain.
func (mr *MockMapperCommonMockRecorder) MapModelsToDomain(entityStruct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapModelsToDomain", reflect.TypeOf((*MockMapperCommon)(nil).MapModelsToDomain), entityStruct)
}

// MockModelsCommon is a mock of ModelsCommon interface.
type MockModelsCommon struct {
	ctrl     *gomock.Controller
	recorder *MockModelsCommonMockRecorder
}

// MockModelsCommonMockRecorder is the mock recorder for MockModelsCommon.
type MockModelsCommonMockRecorder struct {
	mock *MockModelsCommon
}

// NewMockModelsCommon creates a new mock instance.
func NewMockModelsCommon(ctrl *gomock.Controller) *MockModelsCommon {
	mock := &MockModelsCommon{ctrl: ctrl}
	mock.recorder = &MockModelsCommonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelsCommon) EXPECT() *MockModelsCommonMockRecorder {
	return m.recorder
}

// GetColumns mocks base method.
func (m *MockModelsCommon) GetColumns() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumns")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetColumns indicates an expected call of GetColumns.
func (mr *MockModelsCommonMockRecorder) GetColumns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumns", reflect.TypeOf((*MockModelsCommon)(nil).GetColumns))
}

// GetModels mocks base method.
func (m *MockModelsCommon) GetModels() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModels")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetModels indicates an expected call of GetModels.
func (mr *MockModelsCommonMockRecorder) GetModels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModels", reflect.TypeOf((*MockModelsCommon)(nil).GetModels))
}

// GetModelsMap mocks base method.
func (m *MockModelsCommon) GetModelsMap() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelsMap")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetModelsMap indicates an expected call of GetModelsMap.
func (mr *MockModelsCommonMockRecorder) GetModelsMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelsMap", reflect.TypeOf((*MockModelsCommon)(nil).GetModelsMap))
}

// GetTableName mocks base method.
func (m *MockModelsCommon) GetTableName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTableName indicates an expected call of GetTableName.
func (mr *MockModelsCommonMockRecorder) GetTableName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableName", reflect.TypeOf((*MockModelsCommon)(nil).GetTableName))
}

// GetValStruct mocks base method.
func (m *MockModelsCommon) GetValStruct(arrColumn []string) []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValStruct", arrColumn)
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// GetValStruct indicates an expected call of GetValStruct.
func (mr *MockModelsCommonMockRecorder) GetValStruct(arrColumn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValStruct", reflect.TypeOf((*MockModelsCommon)(nil).GetValStruct), arrColumn)
}

// MockSqlTx is a mock of SqlTx interface.
type MockSqlTx struct {
	ctrl     *gomock.Controller
	recorder *MockSqlTxMockRecorder
}

// MockSqlTxMockRecorder is the mock recorder for MockSqlTx.
type MockSqlTxMockRecorder struct {
	mock *MockSqlTx
}

// NewMockSqlTx creates a new mock instance.
func NewMockSqlTx(ctrl *gomock.Controller) *MockSqlTx {
	mock := &MockSqlTx{ctrl: ctrl}
	mock.recorder = &MockSqlTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlTx) EXPECT() *MockSqlTxMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockSqlTx) BeginTx(ctx context.Context, operation func(*repository.Wrapper) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockSqlTxMockRecorder) BeginTx(ctx, operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockSqlTx)(nil).BeginTx), ctx, operation)
}

// DB mocks base method.
func (m *MockSqlTx) DB() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockSqlTxMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockSqlTx)(nil).DB))
}

// Session mocks base method.
func (m *MockSqlTx) Session() *configmysql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session")
	ret0, _ := ret[0].(*configmysql.DB)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockSqlTxMockRecorder) Session() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockSqlTx)(nil).Session))
}

// Wrapper mocks base method.
func (m *MockSqlTx) Wrapper() *repository.Wrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wrapper")
	ret0, _ := ret[0].(*repository.Wrapper)
	return ret0
}

// Wrapper indicates an expected call of Wrapper.
func (mr *MockSqlTxMockRecorder) Wrapper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wrapper", reflect.TypeOf((*MockSqlTx)(nil).Wrapper))
}
