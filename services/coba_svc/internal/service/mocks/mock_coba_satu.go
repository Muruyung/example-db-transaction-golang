// Code generated by MockGen. DO NOT EDIT.
// Source: /home/robi/ngoding/pribadi/example-db-transaction-golang/services/coba_svc/domain/service/coba_satu.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "coba/services/coba_svc/domain/entity"
	service "coba/services/coba_svc/domain/service"
	context "context"
	reflect "reflect"

	goutils "github.com/Muruyung/go-utilities"
	gomock "github.com/golang/mock/gomock"
)

// MockCobaSatuService is a mock of CobaSatuService interface.
type MockCobaSatuService struct {
	ctrl     *gomock.Controller
	recorder *MockCobaSatuServiceMockRecorder
}

// MockCobaSatuServiceMockRecorder is the mock recorder for MockCobaSatuService.
type MockCobaSatuServiceMockRecorder struct {
	mock *MockCobaSatuService
}

// NewMockCobaSatuService creates a new mock instance.
func NewMockCobaSatuService(ctrl *gomock.Controller) *MockCobaSatuService {
	mock := &MockCobaSatuService{ctrl: ctrl}
	mock.recorder = &MockCobaSatuServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCobaSatuService) EXPECT() *MockCobaSatuServiceMockRecorder {
	return m.recorder
}

// CreateCobaSatu mocks base method.
func (m *MockCobaSatuService) CreateCobaSatu(ctx context.Context, dto service.DTOCobaSatu) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCobaSatu", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCobaSatu indicates an expected call of CreateCobaSatu.
func (mr *MockCobaSatuServiceMockRecorder) CreateCobaSatu(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCobaSatu", reflect.TypeOf((*MockCobaSatuService)(nil).CreateCobaSatu), ctx, dto)
}

// DeleteCobaSatu mocks base method.
func (m *MockCobaSatuService) DeleteCobaSatu(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCobaSatu", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCobaSatu indicates an expected call of DeleteCobaSatu.
func (mr *MockCobaSatuServiceMockRecorder) DeleteCobaSatu(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCobaSatu", reflect.TypeOf((*MockCobaSatuService)(nil).DeleteCobaSatu), ctx, id)
}

// GetCobaSatuByID mocks base method.
func (m *MockCobaSatuService) GetCobaSatuByID(ctx context.Context, id string) (*entity.CobaSatu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCobaSatuByID", ctx, id)
	ret0, _ := ret[0].(*entity.CobaSatu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCobaSatuByID indicates an expected call of GetCobaSatuByID.
func (mr *MockCobaSatuServiceMockRecorder) GetCobaSatuByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCobaSatuByID", reflect.TypeOf((*MockCobaSatuService)(nil).GetCobaSatuByID), ctx, id)
}

// GetListCobaSatu mocks base method.
func (m *MockCobaSatuService) GetListCobaSatu(ctx context.Context, request *goutils.RequestOption) ([]*entity.CobaSatu, *goutils.MetaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListCobaSatu", ctx, request)
	ret0, _ := ret[0].([]*entity.CobaSatu)
	ret1, _ := ret[1].(*goutils.MetaResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetListCobaSatu indicates an expected call of GetListCobaSatu.
func (mr *MockCobaSatuServiceMockRecorder) GetListCobaSatu(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListCobaSatu", reflect.TypeOf((*MockCobaSatuService)(nil).GetListCobaSatu), ctx, request)
}

// UpdateCobaSatu mocks base method.
func (m *MockCobaSatuService) UpdateCobaSatu(ctx context.Context, id string, dto service.DTOCobaSatu) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCobaSatu", ctx, id, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCobaSatu indicates an expected call of UpdateCobaSatu.
func (mr *MockCobaSatuServiceMockRecorder) UpdateCobaSatu(ctx, id, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCobaSatu", reflect.TypeOf((*MockCobaSatuService)(nil).UpdateCobaSatu), ctx, id, dto)
}
