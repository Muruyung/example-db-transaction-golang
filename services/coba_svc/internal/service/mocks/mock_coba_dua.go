// Code generated by MockGen. DO NOT EDIT.
// Source: /home/robi/ngoding/pribadi/example-db-transaction-golang/services/coba_svc/domain/service/coba_dua.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "coba/services/coba_svc/domain/entity"
	service "coba/services/coba_svc/domain/service"
	context "context"
	reflect "reflect"

	goutils "github.com/Muruyung/go-utilities"
	gomock "github.com/golang/mock/gomock"
)

// MockCobaDuaService is a mock of CobaDuaService interface.
type MockCobaDuaService struct {
	ctrl     *gomock.Controller
	recorder *MockCobaDuaServiceMockRecorder
}

// MockCobaDuaServiceMockRecorder is the mock recorder for MockCobaDuaService.
type MockCobaDuaServiceMockRecorder struct {
	mock *MockCobaDuaService
}

// NewMockCobaDuaService creates a new mock instance.
func NewMockCobaDuaService(ctrl *gomock.Controller) *MockCobaDuaService {
	mock := &MockCobaDuaService{ctrl: ctrl}
	mock.recorder = &MockCobaDuaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCobaDuaService) EXPECT() *MockCobaDuaServiceMockRecorder {
	return m.recorder
}

// CreateCobaDua mocks base method.
func (m *MockCobaDuaService) CreateCobaDua(ctx context.Context, dto service.DTOCobaDua) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCobaDua", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCobaDua indicates an expected call of CreateCobaDua.
func (mr *MockCobaDuaServiceMockRecorder) CreateCobaDua(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCobaDua", reflect.TypeOf((*MockCobaDuaService)(nil).CreateCobaDua), ctx, dto)
}

// DeleteCobaDua mocks base method.
func (m *MockCobaDuaService) DeleteCobaDua(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCobaDua", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCobaDua indicates an expected call of DeleteCobaDua.
func (mr *MockCobaDuaServiceMockRecorder) DeleteCobaDua(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCobaDua", reflect.TypeOf((*MockCobaDuaService)(nil).DeleteCobaDua), ctx, id)
}

// GetCobaDuaByID mocks base method.
func (m *MockCobaDuaService) GetCobaDuaByID(ctx context.Context, id string) (*entity.CobaDua, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCobaDuaByID", ctx, id)
	ret0, _ := ret[0].(*entity.CobaDua)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCobaDuaByID indicates an expected call of GetCobaDuaByID.
func (mr *MockCobaDuaServiceMockRecorder) GetCobaDuaByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCobaDuaByID", reflect.TypeOf((*MockCobaDuaService)(nil).GetCobaDuaByID), ctx, id)
}

// GetListCobaDua mocks base method.
func (m *MockCobaDuaService) GetListCobaDua(ctx context.Context, request *goutils.RequestOption) ([]*entity.CobaDua, *goutils.MetaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListCobaDua", ctx, request)
	ret0, _ := ret[0].([]*entity.CobaDua)
	ret1, _ := ret[1].(*goutils.MetaResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetListCobaDua indicates an expected call of GetListCobaDua.
func (mr *MockCobaDuaServiceMockRecorder) GetListCobaDua(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListCobaDua", reflect.TypeOf((*MockCobaDuaService)(nil).GetListCobaDua), ctx, request)
}

// UpdateCobaDua mocks base method.
func (m *MockCobaDuaService) UpdateCobaDua(ctx context.Context, id string, dto service.DTOCobaDua) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCobaDua", ctx, id, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCobaDua indicates an expected call of UpdateCobaDua.
func (mr *MockCobaDuaServiceMockRecorder) UpdateCobaDua(ctx, id, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCobaDua", reflect.TypeOf((*MockCobaDuaService)(nil).UpdateCobaDua), ctx, id, dto)
}
